// <auto-generated />
using System;
using CusCake.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CusCake.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250418173027_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CusCake.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("admins");

                    b.HasAnnotation("Relational:JsonPropertyName", "admin");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("admin_id")
                        .HasAnnotation("Relational:JsonPropertyName", "admin_id");

                    b.Property<Guid?>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("entity_id")
                        .HasAnnotation("Relational:JsonPropertyName", "entity_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("char(36)")
                        .HasColumnName("wallet_id")
                        .HasAnnotation("Relational:JsonPropertyName", "wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("auths");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AvailableCakeDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_description")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_description");

                    b.Property<string>("AvailableCakeImageFiles")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("available_cake_image_files")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_image_files");

                    b.Property<Guid?>("AvailableCakeMainImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_main_image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "available_main_image_id");

                    b.Property<string>("AvailableCakeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_name")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_name");

                    b.Property<double>("AvailableCakePrice")
                        .HasColumnType("double")
                        .HasColumnName("available_cake_price")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_price");

                    b.Property<int>("AvailableCakeQuantity")
                        .HasColumnType("int")
                        .HasColumnName("available_cake_quantity")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_quantity");

                    b.Property<string>("AvailableCakeServingSize")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_serving_size")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_serving_size");

                    b.Property<string>("AvailableCakeSize")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_size")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_size");

                    b.Property<string>("AvailableCakeType")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_type")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_type");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("HasLowShippingFee")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_low_shipping_fee")
                        .HasAnnotation("Relational:JsonPropertyName", "has_low_shipping_fee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsQualityGuaranteed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_quality_guaranteed")
                        .HasAnnotation("Relational:JsonPropertyName", "is_quality_guaranteed");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeMainImageId");

                    b.HasIndex("BakeryId");

                    b.ToTable("available_cakes");

                    b.HasAnnotation("Relational:JsonPropertyName", "available_cake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCakeMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("AvailableCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("int")
                        .HasColumnName("quantity_sold")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity_sold");

                    b.Property<double>("RatingAverage")
                        .HasColumnType("double")
                        .HasColumnName("rating_average")
                        .HasAnnotation("Relational:JsonPropertyName", "rating_average");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int")
                        .HasColumnName("reviews_count")
                        .HasAnnotation("Relational:JsonPropertyName", "reviews_count");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeId")
                        .IsUnique();

                    b.ToTable("available_cake_metrics");

                    b.HasAnnotation("Relational:JsonPropertyName", "metric");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<Guid?>("AvatarFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("avatar_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "avatar_file_id");

                    b.Property<Guid>("BackCardFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("back_card_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "back_card_file_id");

                    b.Property<string>("BakeryDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("bakery_description")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_description");

                    b.Property<string>("BakeryName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bakery_name")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_name");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_account")
                        .HasAnnotation("Relational:JsonPropertyName", "bank_account");

                    b.Property<DateTime?>("BannedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("banned_at")
                        .HasAnnotation("Relational:JsonPropertyName", "banned_at");

                    b.Property<string>("CakeDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("cake_description")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_description");

                    b.Property<DateTime>("ConfirmedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("confirmed_at")
                        .HasAnnotation("Relational:JsonPropertyName", "confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<Guid>("FrontCardFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("font_card_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "front_card_file_id");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("identity_card_number")
                        .HasAnnotation("Relational:JsonPropertyName", "identity_card_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("latitude")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("longitude")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("owner_name")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<string>("PriceDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("price_description")
                        .HasAnnotation("Relational:JsonPropertyName", "price_description");

                    b.Property<string>("ShopImageFiles")
                        .HasColumnType("json")
                        .HasColumnName("shop_image_files")
                        .HasAnnotation("Relational:JsonPropertyName", "shop_image_files");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tax_code")
                        .HasAnnotation("Relational:JsonPropertyName", "tax_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvatarFileId");

                    b.HasIndex("BackCardFileId");

                    b.HasIndex("FrontCardFileId");

                    b.ToTable("bakeries");

                    b.HasAnnotation("Relational:JsonPropertyName", "bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.BakeryMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<double>("AppRevenue")
                        .HasColumnType("double")
                        .HasColumnName("app_revenue")
                        .HasAnnotation("Relational:JsonPropertyName", "app_revenue");

                    b.Property<double>("AverageOrderValue")
                        .HasColumnType("double")
                        .HasColumnName("average_order_value")
                        .HasAnnotation("Relational:JsonPropertyName", "average_order_value");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<int>("CustomersCount")
                        .HasColumnType("int")
                        .HasColumnName("customers_count")
                        .HasAnnotation("Relational:JsonPropertyName", "customers_count");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<int>("OrdersCount")
                        .HasColumnType("int")
                        .HasColumnName("orders_count")
                        .HasAnnotation("Relational:JsonPropertyName", "orders_count");

                    b.Property<double>("RatingAverage")
                        .HasColumnType("double")
                        .HasColumnName("rating_average")
                        .HasAnnotation("Relational:JsonPropertyName", "rating_average");

                    b.Property<double>("TotalRevenue")
                        .HasColumnType("double")
                        .HasColumnName("total_revenue")
                        .HasAnnotation("Relational:JsonPropertyName", "total_revenue");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId")
                        .IsUnique();

                    b.ToTable("bakery_metrics");

                    b.HasAnnotation("Relational:JsonPropertyName", "metric");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Color")
                        .HasColumnType("longtext")
                        .HasColumnName("color")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default")
                        .HasAnnotation("Relational:JsonPropertyName", "is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("ImageId");

                    b.ToTable("cake_decoration_options");

                    b.HasAnnotation("Relational:JsonPropertyName", "decoration_option");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<Guid>("DecorationOptionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("decoration_option_id")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_option_id");

                    b.Property<string>("DecorationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_type")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("DecorationOptionId");

                    b.ToTable("cake_decoration_selections");

                    b.HasAnnotation("Relational:JsonPropertyName", "decoration_selections");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Color")
                        .HasColumnType("longtext")
                        .HasColumnName("color")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default")
                        .HasAnnotation("Relational:JsonPropertyName", "is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("ImageId");

                    b.ToTable("cake_extra_options");

                    b.HasAnnotation("Relational:JsonPropertyName", "extra_option");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<Guid>("ExtraOptionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("extra_option_id")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_option_id");

                    b.Property<string>("ExtraType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("extra_type")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("ExtraOptionId");

                    b.ToTable("cake_extra_selections");

                    b.HasAnnotation("Relational:JsonPropertyName", "extra_selections");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("color")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.ToTable("cake_message_options");

                    b.HasAnnotation("Relational:JsonPropertyName", "message_options");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("MessageOptions")
                        .HasColumnType("json")
                        .HasColumnName("message_options")
                        .HasAnnotation("Relational:JsonPropertyName", "message_options");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_type")
                        .HasAnnotation("Relational:JsonPropertyName", "message");

                    b.Property<string>("Text")
                        .HasColumnType("longtext")
                        .HasColumnName("text")
                        .HasAnnotation("Relational:JsonPropertyName", "text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("cake_message_selections");

                    b.HasAnnotation("Relational:JsonPropertyName", "message_selection");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("color")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default")
                        .HasAnnotation("Relational:JsonPropertyName", "is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("ImageId");

                    b.ToTable("cake_part_options");

                    b.HasAnnotation("Relational:JsonPropertyName", "part_option");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("PartOptionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_option_id")
                        .HasAnnotation("Relational:JsonPropertyName", "part_option_id");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("part_type")
                        .HasAnnotation("Relational:JsonPropertyName", "part_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("PartOptionId");

                    b.ToTable("cake_part_selections");

                    b.HasAnnotation("Relational:JsonPropertyName", "part_selections");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("CakeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("custom_cake_name")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("custom_cake_description")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("MessageSelectionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("message_selection_id")
                        .HasAnnotation("Relational:JsonPropertyName", "message_selection_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("total_price")
                        .HasAnnotation("Relational:JsonPropertyName", "total_price");

                    b.Property<string>("Recipe")
                        .HasColumnType("longtext")
                        .HasColumnName("recipe")
                        .HasAnnotation("Relational:JsonPropertyName", "recipe");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MessageSelectionId");

                    b.ToTable("custom_cakes");

                    b.HasAnnotation("Relational:JsonPropertyName", "custom_cake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_type")
                        .HasAnnotation("Relational:JsonPropertyName", "account_type");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext")
                        .HasColumnName("latitude")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext")
                        .HasColumnName("longitude")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("customers");

                    b.HasAnnotation("Relational:JsonPropertyName", "customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomerVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("AppliedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("applied_at")
                        .HasAnnotation("Relational:JsonPropertyName", "applied_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_applied")
                        .HasAnnotation("Relational:JsonPropertyName", "is_applied");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("oder_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("voucher_id")
                        .HasAnnotation("Relational:JsonPropertyName", "voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("VoucherId");

                    b.ToTable("customer_vouchers");

                    b.HasAnnotation("Relational:JsonPropertyName", "customer_voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("admin_id")
                        .HasAnnotation("Relational:JsonPropertyName", "admin_id");

                    b.Property<Guid?>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read")
                        .HasAnnotation("Relational:JsonPropertyName", "is_read");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sender_type")
                        .HasAnnotation("Relational:JsonPropertyName", "sender_type");

                    b.Property<Guid>("TargetEntityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("target_entity_id")
                        .HasAnnotation("Relational:JsonPropertyName", "target_entity_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<double>("AppCommissionFee")
                        .HasColumnType("double")
                        .HasColumnName("app_commission_fee")
                        .HasAnnotation("Relational:JsonPropertyName", "app_commission_fee");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("CancelBy")
                        .HasColumnType("longtext")
                        .HasColumnName("cancel_by")
                        .HasAnnotation("Relational:JsonPropertyName", "cancel_by");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("longtext")
                        .HasColumnName("canceled_reason")
                        .HasAnnotation("Relational:JsonPropertyName", "canceled_reason");

                    b.Property<double>("CommissionRate")
                        .HasColumnType("double")
                        .HasColumnName("commission_rate")
                        .HasAnnotation("Relational:JsonPropertyName", "commission_rate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<Guid?>("CustomerVoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_voucher_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_voucher_id");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double")
                        .HasColumnName("discount_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "discount_amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext")
                        .HasColumnName("latitude")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext")
                        .HasColumnName("longitude")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("order_code")
                        .HasAnnotation("Relational:JsonPropertyName", "order_code");

                    b.Property<string>("OrderNote")
                        .HasColumnType("longtext")
                        .HasColumnName("order_note")
                        .HasAnnotation("Relational:JsonPropertyName", "order_note");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("order_status")
                        .HasAnnotation("Relational:JsonPropertyName", "order_status");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_at")
                        .HasAnnotation("Relational:JsonPropertyName", "paid_at");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payment_type")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_type");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number")
                        .HasAnnotation("Relational:JsonPropertyName", "phone_number");

                    b.Property<DateTime?>("PickUpTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("pickup_time")
                        .HasAnnotation("Relational:JsonPropertyName", "pickup_time");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("shipping_address")
                        .HasAnnotation("Relational:JsonPropertyName", "shipping_address");

                    b.Property<double>("ShippingDistance")
                        .HasColumnType("double")
                        .HasColumnName("shipping_distance")
                        .HasAnnotation("Relational:JsonPropertyName", "shipping_distance");

                    b.Property<double>("ShippingFee")
                        .HasColumnType("double")
                        .HasColumnName("shipping_fee")
                        .HasAnnotation("Relational:JsonPropertyName", "shipping_fee");

                    b.Property<double?>("ShippingTime")
                        .HasColumnType("double")
                        .HasColumnName("shipping_time")
                        .HasAnnotation("Relational:JsonPropertyName", "shipping_time");

                    b.Property<string>("ShippingType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("shipping_type")
                        .HasAnnotation("Relational:JsonPropertyName", "shipping_type");

                    b.Property<double>("ShopRevenue")
                        .HasColumnType("double")
                        .HasColumnName("shop_revenue")
                        .HasAnnotation("Relational:JsonPropertyName", "shop_revenue");

                    b.Property<double>("TotalCustomerPaid")
                        .HasColumnType("double")
                        .HasColumnName("total_customer_paid")
                        .HasAnnotation("Relational:JsonPropertyName", "total_customer_paid");

                    b.Property<double>("TotalProductPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_product_price")
                        .HasAnnotation("Relational:JsonPropertyName", "total_product_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("longtext")
                        .HasColumnName("voucher_code")
                        .HasAnnotation("Relational:JsonPropertyName", "voucher_code");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("voucher_id")
                        .HasAnnotation("Relational:JsonPropertyName", "voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("orders");

                    b.HasAnnotation("Relational:JsonPropertyName", "order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("AvailableCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_id");

                    b.Property<string>("CakeNote")
                        .HasColumnType("longtext")
                        .HasColumnName("cake_note")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_note");

                    b.Property<Guid?>("CakeReviewId")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_id")
                        .HasAnnotation("Relational:JsonPropertyName", "review_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid?>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity");

                    b.Property<double?>("SubTotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("sub_total_price")
                        .HasAnnotation("Relational:JsonPropertyName", "sub_total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeId");

                    b.HasIndex("CakeReviewId")
                        .IsUnique();

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_detail");

                    b.HasAnnotation("Relational:JsonPropertyName", "order_detail");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderSupport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "file_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FileId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_supports");

                    b.HasAnnotation("Relational:JsonPropertyName", "order_supports");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<string>("ReportFiles")
                        .HasColumnType("json")
                        .HasColumnName("report_files")
                        .HasAnnotation("Relational:JsonPropertyName", "report_files");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("AvailableCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid?>("OrderDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_detail_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_detail_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<string>("ReviewType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("review_type")
                        .HasAnnotation("Relational:JsonPropertyName", "review_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeId");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ImageId");

                    b.ToTable("reviews");

                    b.HasAnnotation("Relational:JsonPropertyName", "review");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_name")
                        .HasAnnotation("Relational:JsonPropertyName", "file_name");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_url")
                        .HasAnnotation("Relational:JsonPropertyName", "file_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.ToTable("storages");

                    b.HasAnnotation("Relational:JsonPropertyName", "report_files");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("account_number")
                        .HasAnnotation("Relational:JsonPropertyName", "account_number");

                    b.Property<double?>("Accumulated")
                        .HasColumnType("double")
                        .HasColumnName("accumulated")
                        .HasAnnotation("Relational:JsonPropertyName", "accumulated");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount")
                        .HasAnnotation("Relational:JsonPropertyName", "amount");

                    b.Property<string>("Code")
                        .HasColumnType("longtext")
                        .HasColumnName("code")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Gateway")
                        .HasColumnType("longtext")
                        .HasColumnName("gate_way")
                        .HasAnnotation("Relational:JsonPropertyName", "gate_way");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("longtext")
                        .HasColumnName("reference_code")
                        .HasAnnotation("Relational:JsonPropertyName", "reference_code");

                    b.Property<string>("SubAccount")
                        .HasColumnType("longtext")
                        .HasColumnName("sub_account")
                        .HasAnnotation("Relational:JsonPropertyName", "sub_account");

                    b.Property<string>("TransactionDate")
                        .HasColumnType("longtext")
                        .HasColumnName("transaction_date")
                        .HasAnnotation("Relational:JsonPropertyName", "transaction_date");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id")
                        .HasAnnotation("Relational:JsonPropertyName", "transaction_id");

                    b.Property<double?>("TransferAmount")
                        .HasColumnType("double")
                        .HasColumnName("transfer_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "transfer_amount");

                    b.Property<string>("TransferType")
                        .HasColumnType("longtext")
                        .HasColumnName("transfer_type")
                        .HasAnnotation("Relational:JsonPropertyName", "transfer_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("transactions");

                    b.HasAnnotation("Relational:JsonPropertyName", "transaction");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("double")
                        .HasColumnName("discount_percentage")
                        .HasAnnotation("Relational:JsonPropertyName", "discount_percentage");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiration_date")
                        .HasAnnotation("Relational:JsonPropertyName", "expiration_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<double>("MaxDiscountAmount")
                        .HasColumnType("double")
                        .HasColumnName("max_discount_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "max_discount_amount");

                    b.Property<double>("MinOrderAmount")
                        .HasColumnType("double")
                        .HasColumnName("min_order_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "min_order_amount");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int")
                        .HasColumnName("usage_count")
                        .HasAnnotation("Relational:JsonPropertyName", "usage_count");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("voucher_type")
                        .HasAnnotation("Relational:JsonPropertyName", "voucher_type");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.ToTable("vouchers");

                    b.HasAnnotation("Relational:JsonPropertyName", "voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("balance")
                        .HasAnnotation("Relational:JsonPropertyName", "balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.ToTable("wallets");

                    b.HasAnnotation("Relational:JsonPropertyName", "auth");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount")
                        .HasAnnotation("Relational:JsonPropertyName", "amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("transaction_type")
                        .HasAnnotation("Relational:JsonPropertyName", "transaction_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("char(36)")
                        .HasColumnName("wallet_id")
                        .HasAnnotation("Relational:JsonPropertyName", "wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("wallet_transactions");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Auth", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId");

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("CusCake.Domain.Entities.Wallet", "Wallet")
                        .WithOne()
                        .HasForeignKey("CusCake.Domain.Entities.Auth", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "AvailableCakeMainImage")
                        .WithMany()
                        .HasForeignKey("AvailableCakeMainImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCakeMainImage");

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCakeMetric", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.AvailableCake", "AvailableCake")
                        .WithOne("Metric")
                        .HasForeignKey("CusCake.Domain.Entities.AvailableCakeMetric", "AvailableCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "AvatarFile")
                        .WithMany()
                        .HasForeignKey("AvatarFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Storage", "BackCardFile")
                        .WithMany()
                        .HasForeignKey("BackCardFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "FrontCardFile")
                        .WithMany()
                        .HasForeignKey("FrontCardFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvatarFile");

                    b.Navigation("BackCardFile");

                    b.Navigation("FrontCardFile");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.BakeryMetric", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithOne("Metric")
                        .HasForeignKey("CusCake.Domain.Entities.BakeryMetric", "BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationOption", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Bakery");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationSelection", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("DecorationSelections")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CakeDecorationOption", "DecorationOption")
                        .WithMany()
                        .HasForeignKey("DecorationOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomCake");

                    b.Navigation("DecorationOption");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraOption", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Bakery");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraSelection", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("ExtraSelections")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CakeExtraOption", "ExtraOption")
                        .WithMany()
                        .HasForeignKey("ExtraOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomCake");

                    b.Navigation("ExtraOption");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageOption", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageSelection", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartOption", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bakery");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartSelection", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("PartSelections")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CakePartOption", "PartOption")
                        .WithMany()
                        .HasForeignKey("PartOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomCake");

                    b.Navigation("PartOption");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CakeMessageSelection", "MessageSelection")
                        .WithMany()
                        .HasForeignKey("MessageSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("MessageSelection");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomerVoucher", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithOne("CustomerVoucher")
                        .HasForeignKey("CusCake.Domain.Entities.CustomerVoucher", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Admin");

                    b.Navigation("Bakery");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.AvailableCake", "AvailableCake")
                        .WithMany()
                        .HasForeignKey("AvailableCakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Review", "Review")
                        .WithOne("OrderDetail")
                        .HasForeignKey("CusCake.Domain.Entities.OrderDetail", "CakeReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCake");

                    b.Navigation("CustomCake");

                    b.Navigation("Order");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderSupport", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("File");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Report", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Review", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.AvailableCake", "AvailableCake")
                        .WithMany()
                        .HasForeignKey("AvailableCakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AvailableCake");

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany()
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.Navigation("Metric");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.Navigation("Metric");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.Navigation("DecorationSelections");

                    b.Navigation("ExtraSelections");

                    b.Navigation("OrderDetails");

                    b.Navigation("PartSelections");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.Navigation("CustomerVoucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Review", b =>
                {
                    b.Navigation("OrderDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
