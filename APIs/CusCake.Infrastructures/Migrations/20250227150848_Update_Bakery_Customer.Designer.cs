// <auto-generated />
using System;
using CusCake.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CusCake.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250227150848_Update_Bakery_Customer")]
    partial class Update_Bakery_Customer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AvailableCakeDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_description");

                    b.Property<Guid>("AvailableCakeImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_image_id");

                    b.Property<string>("AvailableCakeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_name");

                    b.Property<double>("AvailableCakePrice")
                        .HasColumnType("double")
                        .HasColumnName("available_cake_price");

                    b.Property<int>("AvailableCakeQuantity")
                        .HasColumnType("int")
                        .HasColumnName("available_cake_quantity");

                    b.Property<string>("AvailableCakeType")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_type");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.ToTable("available_cakes");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<Guid>("AvatarFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("avatar_file_id");

                    b.Property<Guid>("BackCardFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("back_card_file_id");

                    b.Property<string>("BakeryName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bakery_name");

                    b.Property<DateTime>("ConfirmedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<Guid>("FrontCardFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("font_card_file_id");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("identity_card_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("owner_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("ShopImageFiles")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("shop_image_files");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tax_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryName")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityCardNumber")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("TaxCode")
                        .IsUnique();

                    b.ToTable("bakeries");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.BankEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_number");

                    b.Property<double>("Accumulated")
                        .HasColumnType("double")
                        .HasColumnName("accumulated");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Gateway")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gateway");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_processed");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("processed_at");

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reference_code");

                    b.Property<string>("SubAccount")
                        .HasColumnType("longtext")
                        .HasColumnName("sub_account");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transaction_date");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("transaction_id");

                    b.Property<double>("TransferAmount")
                        .HasColumnType("double")
                        .HasColumnName("tranfer_amount");

                    b.Property<string>("TransferType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("transfer_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("bank_events");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecoration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("DecorationDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_description");

                    b.Property<string>("DecorationName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_name");

                    b.Property<double>("DecorationPrice")
                        .HasColumnType("double")
                        .HasColumnName("decoration_price");

                    b.Property<string>("DecorationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("cake_decorations");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CakeDecorationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_extra_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakeDecorationId");

                    b.HasIndex("CustomCakeId");

                    b.ToTable("cake_decoration_details");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("ExtraDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("extra_description");

                    b.Property<string>("ExtraName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("extra_name");

                    b.Property<double?>("ExtraNumber")
                        .HasColumnType("double")
                        .HasColumnName("extra_number");

                    b.Property<string>("ExtraType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("extra_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<double>("PartPrice")
                        .HasColumnType("double")
                        .HasColumnName("extra_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("cake_extras");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CakeExtraId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_extra_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakeExtraId");

                    b.HasIndex("CustomCakeId");

                    b.ToTable("cake_extra_details");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("MessageColor")
                        .HasColumnType("longtext")
                        .HasColumnName("message_color");

                    b.Property<string>("MessageDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("message_description");

                    b.Property<Guid>("MessageImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("message_image_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CustomCakeId");

                    b.ToTable("cake_messages");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PartDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("part_description");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("part_name");

                    b.Property<double>("PartPrice")
                        .HasColumnType("double")
                        .HasColumnName("part_price");

                    b.Property<double?>("PartSize")
                        .HasColumnType("double")
                        .HasColumnName("part_size");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("part_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("cake_parts");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CakePartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_part_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakePartId");

                    b.HasIndex("CustomCakeId");

                    b.ToTable("cake_part_details");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("AvailableCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_detail_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<Guid>("ReviewImageFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_image_file_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeId");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("cake_reviews");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id");

                    b.Property<string>("CakeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("custom_cake_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("custom_cake_description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("total_price");

                    b.Property<string>("Recipe")
                        .HasColumnType("longtext")
                        .HasColumnName("recipe");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("custom_cakes");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_type");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("customers");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomerVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("oder_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("VoucherId");

                    b.ToTable("customer_vouchers");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notification_type");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sender_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("longtext")
                        .HasColumnName("canceled_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<Guid?>("CustomerVoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_voucher_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OrderAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("order_address");

                    b.Property<string>("OrderNote")
                        .HasColumnType("longtext")
                        .HasColumnName("order_note");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("order_status");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("PickUpTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("pickup_time");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_price");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("AvailableCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_id");

                    b.Property<string>("CakeNote")
                        .HasColumnType("longtext")
                        .HasColumnName("cake_note");

                    b.Property<Guid?>("CakeReviewId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_review_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<double?>("SubTotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("sub_total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeId");

                    b.HasIndex("CakeReviewId")
                        .IsUnique();

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_detail");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderSupport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("OrderSupportFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_support_file_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_supports");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("storages");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double")
                        .HasColumnName("discount_amount");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("double")
                        .HasColumnName("discount_percentage");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<double>("MaxDiscountAmount")
                        .HasColumnType("double")
                        .HasColumnName("max_discount_amount");

                    b.Property<double>("MinOrderAmount")
                        .HasColumnType("double")
                        .HasColumnName("min_order_amount");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int")
                        .HasColumnName("usage_count");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("voucher_type");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("AvailableCakes")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.BankEvent", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Transaction", "Transaction")
                        .WithMany("BankEvents")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakeDecoration", "CakeDecoration")
                        .WithMany("CakeDecorationDetails")
                        .HasForeignKey("CakeDecorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakeDecorationDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CakeDecoration");

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakeExtra", "CakeExtra")
                        .WithMany("CakeExtraDetails")
                        .HasForeignKey("CakeExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakeExtraDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CakeExtra");

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessage", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakeMessages")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakePart", "CakePart")
                        .WithMany("CakePartDetails")
                        .HasForeignKey("CakePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakePartDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CakePart");

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeReview", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.AvailableCake", "AvailableCake")
                        .WithMany("CakeReviews")
                        .HasForeignKey("AvailableCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("CakeReviews")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("CakeReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCake");

                    b.Navigation("Bakery");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("CustomCakes")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomCakes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomerVoucher", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerVouchers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithOne("CustomerVoucher")
                        .HasForeignKey("CusCake.Domain.Entities.CustomerVoucher", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Voucher", "Voucher")
                        .WithMany("CustomerVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("Notifications")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bakery");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("Orders")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.AvailableCake", "AvailableCake")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AvailableCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CakeReview", "CakeReview")
                        .WithOne("OrderDetail")
                        .HasForeignKey("CusCake.Domain.Entities.OrderDetail", "CakeReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCake");

                    b.Navigation("CakeReview");

                    b.Navigation("CustomCake");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderSupport", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("OrderSupports")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("OrderSupports")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany("OrderSupports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithOne("Transaction")
                        .HasForeignKey("CusCake.Domain.Entities.Transaction", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("Vouchers")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.Navigation("CakeReviews");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.Navigation("AvailableCakes");

                    b.Navigation("CakeReviews");

                    b.Navigation("CustomCakes");

                    b.Navigation("Notifications");

                    b.Navigation("OrderSupports");

                    b.Navigation("Orders");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecoration", b =>
                {
                    b.Navigation("CakeDecorationDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtra", b =>
                {
                    b.Navigation("CakeExtraDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePart", b =>
                {
                    b.Navigation("CakePartDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeReview", b =>
                {
                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.Navigation("CakeDecorationDetails");

                    b.Navigation("CakeExtraDetails");

                    b.Navigation("CakeMessages");

                    b.Navigation("CakePartDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CakeReviews");

                    b.Navigation("CustomCakes");

                    b.Navigation("CustomerVouchers");

                    b.Navigation("Notifications");

                    b.Navigation("OrderSupports");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.Navigation("CustomerVoucher");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderSupports");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("BankEvents");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.Navigation("CustomerVouchers");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
