// <auto-generated />
using System;
using CusCake.Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CusCake.Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250308082752_add_auths_entity")]
    partial class add_auths_entity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CusCake.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("admins");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("entity_id")
                        .HasAnnotation("Relational:JsonPropertyName", "entity_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.ToTable("auths");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AvailableCakeDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_description")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_description");

                    b.Property<string>("AvailableCakeImageFiles")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_image_files")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_image_files");

                    b.Property<Guid?>("AvailableCakeMainImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_main_image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "available_main_image_id");

                    b.Property<string>("AvailableCakeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_name")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_name");

                    b.Property<double>("AvailableCakePrice")
                        .HasColumnType("double")
                        .HasColumnName("available_cake_price")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_price");

                    b.Property<int>("AvailableCakeQuantity")
                        .HasColumnType("int")
                        .HasColumnName("available_cake_quantity")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_quantity");

                    b.Property<string>("AvailableCakeType")
                        .HasColumnType("longtext")
                        .HasColumnName("available_cake_type")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_type");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeMainImageId");

                    b.HasIndex("BakeryId");

                    b.ToTable("available_cakes");

                    b.HasAnnotation("Relational:JsonPropertyName", "available_cake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<Guid?>("AvatarFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("avatar_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "avatar_file_id");

                    b.Property<Guid>("BackCardFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("back_card_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "back_card_file_id");

                    b.Property<string>("BakeryName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bakery_name")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_name");

                    b.Property<DateTime>("ConfirmedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("confirmed_at")
                        .HasAnnotation("Relational:JsonPropertyName", "confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<Guid>("FrontCardFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("font_card_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "front_card_file_id");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("identity_card_number")
                        .HasAnnotation("Relational:JsonPropertyName", "identity_card_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("owner_name")
                        .HasAnnotation("Relational:JsonPropertyName", "owner_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<string>("ShopImageFiles")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("shop_image_files")
                        .HasAnnotation("Relational:JsonPropertyName", "shop_image_files");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tax_code")
                        .HasAnnotation("Relational:JsonPropertyName", "tax_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvatarFileId");

                    b.HasIndex("BackCardFileId");

                    b.HasIndex("FrontCardFileId");

                    b.ToTable("bakeries");

                    b.HasAnnotation("Relational:JsonPropertyName", "bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.BankEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_number")
                        .HasAnnotation("Relational:JsonPropertyName", "account_number");

                    b.Property<double>("Accumulated")
                        .HasColumnType("double")
                        .HasColumnName("accumulated")
                        .HasAnnotation("Relational:JsonPropertyName", "accumulated");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Gateway")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gateway")
                        .HasAnnotation("Relational:JsonPropertyName", "gateway");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_processed")
                        .HasAnnotation("Relational:JsonPropertyName", "is_processed");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("processed_at")
                        .HasAnnotation("Relational:JsonPropertyName", "processed_at");

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reference_code")
                        .HasAnnotation("Relational:JsonPropertyName", "reference_code");

                    b.Property<string>("SubAccount")
                        .HasColumnType("longtext")
                        .HasColumnName("sub_account")
                        .HasAnnotation("Relational:JsonPropertyName", "sub_account");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transaction_date")
                        .HasAnnotation("Relational:JsonPropertyName", "transaction_date");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("transaction_id")
                        .HasAnnotation("Relational:JsonPropertyName", "transaction_id");

                    b.Property<double>("TransferAmount")
                        .HasColumnType("double")
                        .HasColumnName("tranfer_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "transfer_amount");

                    b.Property<string>("TransferType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("transfer_type")
                        .HasAnnotation("Relational:JsonPropertyName", "transfer_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("bank_events");

                    b.HasAnnotation("Relational:JsonPropertyName", "bank_events");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecoration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("DecorationColor")
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_color")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_color");

                    b.Property<string>("DecorationDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_description")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_description");

                    b.Property<Guid?>("DecorationImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("decoration_image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_image_id");

                    b.Property<string>("DecorationName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_name")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_name");

                    b.Property<double>("DecorationPrice")
                        .HasColumnType("double")
                        .HasColumnName("decoration_price")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_price");

                    b.Property<string>("DecorationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("decoration_type")
                        .HasAnnotation("Relational:JsonPropertyName", "decoration_type");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default")
                        .HasAnnotation("Relational:JsonPropertyName", "is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DecorationImageId");

                    b.ToTable("cake_decorations");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_decoration");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("CakeDecorationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_extra_id")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_decoration_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakeDecorationId");

                    b.HasIndex("CustomCakeId");

                    b.ToTable("cake_decoration_details");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_decoration_details");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("ExtraColor")
                        .HasColumnType("longtext")
                        .HasColumnName("extra_color")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_color");

                    b.Property<string>("ExtraDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("extra_description")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_description");

                    b.Property<Guid?>("ExtraImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("extra_image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_image_id");

                    b.Property<string>("ExtraName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("extra_name")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_name");

                    b.Property<double>("ExtraPrice")
                        .HasColumnType("double")
                        .HasColumnName("extra_price")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_price");

                    b.Property<string>("ExtraType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("extra_type")
                        .HasAnnotation("Relational:JsonPropertyName", "extra_type");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default")
                        .HasAnnotation("Relational:JsonPropertyName", "is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ExtraImageId");

                    b.ToTable("cake_extras");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_extra");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("CakeExtraId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_extra_id")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_extra_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakeExtraId");

                    b.HasIndex("CustomCakeId");

                    b.ToTable("cake_extra_details");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_extra_details");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("MessageDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("message_description")
                        .HasAnnotation("Relational:JsonPropertyName", "message_description");

                    b.Property<Guid?>("MessageImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("message_image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "message_image_id");

                    b.Property<string>("MessageName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_name")
                        .HasAnnotation("Relational:JsonPropertyName", "message_name");

                    b.Property<double>("MessagePrice")
                        .HasColumnType("double")
                        .HasColumnName("message_price")
                        .HasAnnotation("Relational:JsonPropertyName", "message_price");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_type")
                        .HasAnnotation("Relational:JsonPropertyName", "message_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("MessageImageId");

                    b.ToTable("cake_messages");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_message");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("CakeMessageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_message_id")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_message_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message")
                        .HasAnnotation("Relational:JsonPropertyName", "message");

                    b.Property<Guid?>("MessageImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("message_image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "message_image_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_type")
                        .HasAnnotation("Relational:JsonPropertyName", "message_type");

                    b.Property<string>("MessageTypeDetails")
                        .HasColumnType("json")
                        .HasColumnName("message_type_details")
                        .HasAnnotation("Relational:JsonPropertyName", "message_type_details");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakeMessageId");

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("MessageImageId");

                    b.ToTable("cake_message_details");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_message_details");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("CakeMessageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_message_id")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_message_id");

                    b.Property<string>("Color")
                        .HasColumnType("longtext")
                        .HasColumnName("message_color")
                        .HasAnnotation("Relational:JsonPropertyName", "message_color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_name")
                        .HasAnnotation("Relational:JsonPropertyName", "message_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_type")
                        .HasAnnotation("Relational:JsonPropertyName", "message_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakeMessageId");

                    b.ToTable("cake_message_types");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_message_types");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default")
                        .HasAnnotation("Relational:JsonPropertyName", "is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("PartColor")
                        .HasColumnType("longtext")
                        .HasColumnName("part_color")
                        .HasAnnotation("Relational:JsonPropertyName", "part_color");

                    b.Property<string>("PartDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("part_description")
                        .HasAnnotation("Relational:JsonPropertyName", "part_description");

                    b.Property<Guid?>("PartImageId")
                        .HasColumnType("char(36)")
                        .HasColumnName("part_image_id")
                        .HasAnnotation("Relational:JsonPropertyName", "part_image_id");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("part_name")
                        .HasAnnotation("Relational:JsonPropertyName", "part_name");

                    b.Property<double>("PartPrice")
                        .HasColumnType("double")
                        .HasColumnName("part_price")
                        .HasAnnotation("Relational:JsonPropertyName", "part_price");

                    b.Property<double?>("PartSize")
                        .HasColumnType("double")
                        .HasColumnName("part_size")
                        .HasAnnotation("Relational:JsonPropertyName", "part_size");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("part_type")
                        .HasAnnotation("Relational:JsonPropertyName", "part_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PartImageId");

                    b.ToTable("cake_parts");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_part");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("CakePartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_part_id")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_part_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CakePartId");

                    b.HasIndex("CustomCakeId");

                    b.ToTable("cake_part_details");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_part_details");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("AvailableCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_detail_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_detail_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<Guid>("ReviewImageFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("review_image_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "review_image_file_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeId");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("cake_reviews");

                    b.HasAnnotation("Relational:JsonPropertyName", "cake_review");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("CakeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("custom_cake_name")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("custom_cake_description")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("total_price")
                        .HasAnnotation("Relational:JsonPropertyName", "total_price");

                    b.Property<string>("Recipe")
                        .HasColumnType("longtext")
                        .HasColumnName("recipe")
                        .HasAnnotation("Relational:JsonPropertyName", "recipe");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("custom_cakes");

                    b.HasAnnotation("Relational:JsonPropertyName", "custom_cake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_type")
                        .HasAnnotation("Relational:JsonPropertyName", "account_type");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address")
                        .HasAnnotation("Relational:JsonPropertyName", "address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("customers");

                    b.HasAnnotation("Relational:JsonPropertyName", "customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomerVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("oder_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("voucher_id")
                        .HasAnnotation("Relational:JsonPropertyName", "voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("VoucherId");

                    b.ToTable("customer_vouchers");

                    b.HasAnnotation("Relational:JsonPropertyName", "customer_vouchers");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read")
                        .HasAnnotation("Relational:JsonPropertyName", "is_read");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notification_type")
                        .HasAnnotation("Relational:JsonPropertyName", "notification_type");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sender_id")
                        .HasAnnotation("Relational:JsonPropertyName", "sender_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("notifications");

                    b.HasAnnotation("Relational:JsonPropertyName", "notifications");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("CanceledReason")
                        .HasColumnType("longtext")
                        .HasColumnName("canceled_reason")
                        .HasAnnotation("Relational:JsonPropertyName", "canceled_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<Guid?>("CustomerVoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_voucher_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_voucher_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<string>("OrderAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("order_address")
                        .HasAnnotation("Relational:JsonPropertyName", "order_address");

                    b.Property<string>("OrderNote")
                        .HasColumnType("longtext")
                        .HasColumnName("order_note")
                        .HasAnnotation("Relational:JsonPropertyName", "order_note");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("order_status")
                        .HasAnnotation("Relational:JsonPropertyName", "order_status");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payment_type")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_type");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number")
                        .HasAnnotation("Relational:JsonPropertyName", "phone_number");

                    b.Property<DateTime?>("PickUpTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("pickup_time")
                        .HasAnnotation("Relational:JsonPropertyName", "pickup_time");

                    b.Property<string>("ShippingType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("shipping_type")
                        .HasAnnotation("Relational:JsonPropertyName", "shipping_type");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_price")
                        .HasAnnotation("Relational:JsonPropertyName", "total_price");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("transaction_id")
                        .HasAnnotation("Relational:JsonPropertyName", "transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("char(36)")
                        .HasColumnName("voucher_id")
                        .HasAnnotation("Relational:JsonPropertyName", "voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("orders");

                    b.HasAnnotation("Relational:JsonPropertyName", "order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("AvailableCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("available_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "available_cake_id");

                    b.Property<string>("CakeNote")
                        .HasColumnType("longtext")
                        .HasColumnName("cake_note")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_note");

                    b.Property<Guid?>("CakeReviewId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cake_review_id")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_review_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid?>("CustomCakeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("custom_cake_id")
                        .HasAnnotation("Relational:JsonPropertyName", "custom_cake_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<double?>("SubTotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("sub_total_price")
                        .HasAnnotation("Relational:JsonPropertyName", "sub_total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AvailableCakeId");

                    b.HasIndex("CakeReviewId")
                        .IsUnique();

                    b.HasIndex("CustomCakeId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_detail");

                    b.HasAnnotation("Relational:JsonPropertyName", "order_detail");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderSupport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<Guid?>("OrderSupportFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_support_file_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_support_file_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_supports");

                    b.HasAnnotation("Relational:JsonPropertyName", "order_supports");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_name")
                        .HasAnnotation("Relational:JsonPropertyName", "file_name");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_url")
                        .HasAnnotation("Relational:JsonPropertyName", "file_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.ToTable("storages");

                    b.HasAnnotation("Relational:JsonPropertyName", "part_image");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount")
                        .HasAnnotation("Relational:JsonPropertyName", "amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id")
                        .HasAnnotation("Relational:JsonPropertyName", "order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("transactions");

                    b.HasAnnotation("Relational:JsonPropertyName", "transaction");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("BakeryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("bakery_id")
                        .HasAnnotation("Relational:JsonPropertyName", "bakery_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by")
                        .HasAnnotation("Relational:JsonPropertyName", "created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double")
                        .HasColumnName("discount_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "discount_amount");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("double")
                        .HasColumnName("discount_percentage")
                        .HasAnnotation("Relational:JsonPropertyName", "discount_percentage");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiration_date")
                        .HasAnnotation("Relational:JsonPropertyName", "expiration_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasAnnotation("Relational:JsonPropertyName", "is_deleted");

                    b.Property<double>("MaxDiscountAmount")
                        .HasColumnType("double")
                        .HasColumnName("max_discount_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "max_discount_amount");

                    b.Property<double>("MinOrderAmount")
                        .HasColumnType("double")
                        .HasColumnName("min_order_amount")
                        .HasAnnotation("Relational:JsonPropertyName", "min_order_amount");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int")
                        .HasColumnName("usage_count")
                        .HasAnnotation("Relational:JsonPropertyName", "usage_count");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit")
                        .HasAnnotation("Relational:JsonPropertyName", "usage_limit");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("voucher_type")
                        .HasAnnotation("Relational:JsonPropertyName", "voucher_type");

                    b.HasKey("Id");

                    b.HasIndex("BakeryId");

                    b.ToTable("vouchers");

                    b.HasAnnotation("Relational:JsonPropertyName", "voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "AvailableCakeMainImage")
                        .WithMany()
                        .HasForeignKey("AvailableCakeMainImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("AvailableCakes")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCakeMainImage");

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "AvatarFile")
                        .WithMany()
                        .HasForeignKey("AvatarFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Storage", "BackCardFile")
                        .WithMany()
                        .HasForeignKey("BackCardFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "FrontCardFile")
                        .WithMany()
                        .HasForeignKey("FrontCardFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvatarFile");

                    b.Navigation("BackCardFile");

                    b.Navigation("FrontCardFile");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.BankEvent", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Transaction", "Transaction")
                        .WithMany("BankEvents")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecoration", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "DecorationImage")
                        .WithMany()
                        .HasForeignKey("DecorationImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DecorationImage");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecorationDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakeDecoration", "CakeDecoration")
                        .WithMany("CakeDecorationDetails")
                        .HasForeignKey("CakeDecorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakeDecorationDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CakeDecoration");

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtra", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "ExtraImage")
                        .WithMany()
                        .HasForeignKey("ExtraImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExtraImage");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtraDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakeExtra", "CakeExtra")
                        .WithMany("CakeExtraDetails")
                        .HasForeignKey("CakeExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakeExtraDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CakeExtra");

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessage", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "MessageImage")
                        .WithMany()
                        .HasForeignKey("MessageImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MessageImage");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakeMessage", "CakeMessage")
                        .WithMany("CakeMessageDetails")
                        .HasForeignKey("CakeMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakeMessageDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Storage", "MessageImageFile")
                        .WithMany()
                        .HasForeignKey("MessageImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CakeMessage");

                    b.Navigation("CustomCake");

                    b.Navigation("MessageImageFile");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessageType", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakeMessage", "CakeMessage")
                        .WithMany("CakeMessageTypes")
                        .HasForeignKey("CakeMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CakeMessage");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePart", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Storage", "PartImage")
                        .WithMany()
                        .HasForeignKey("PartImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PartImage");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePartDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.CakePart", "CakePart")
                        .WithMany("CakePartDetails")
                        .HasForeignKey("CakePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("CakePartDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CakePart");

                    b.Navigation("CustomCake");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeReview", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.AvailableCake", "AvailableCake")
                        .WithMany("CakeReviews")
                        .HasForeignKey("AvailableCakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("CakeReviews")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("CakeReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCake");

                    b.Navigation("Bakery");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("CustomCakes")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomCakes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomerVoucher", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerVouchers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithOne("CustomerVoucher")
                        .HasForeignKey("CusCake.Domain.Entities.CustomerVoucher", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Voucher", "Voucher")
                        .WithMany("CustomerVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("Notifications")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bakery");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("Orders")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.AvailableCake", "AvailableCake")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AvailableCakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.CakeReview", "CakeReview")
                        .WithOne("OrderDetail")
                        .HasForeignKey("CusCake.Domain.Entities.OrderDetail", "CakeReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.CustomCake", "CustomCake")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomCakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableCake");

                    b.Navigation("CakeReview");

                    b.Navigation("CustomCake");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.OrderSupport", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("OrderSupports")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Customer", "Customer")
                        .WithMany("OrderSupports")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithMany("OrderSupports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Order", "Order")
                        .WithOne("Transaction")
                        .HasForeignKey("CusCake.Domain.Entities.Transaction", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.HasOne("CusCake.Domain.Entities.Bakery", "Bakery")
                        .WithMany("Vouchers")
                        .HasForeignKey("BakeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bakery");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.AvailableCake", b =>
                {
                    b.Navigation("CakeReviews");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Bakery", b =>
                {
                    b.Navigation("AvailableCakes");

                    b.Navigation("CakeReviews");

                    b.Navigation("CustomCakes");

                    b.Navigation("Notifications");

                    b.Navigation("OrderSupports");

                    b.Navigation("Orders");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeDecoration", b =>
                {
                    b.Navigation("CakeDecorationDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeExtra", b =>
                {
                    b.Navigation("CakeExtraDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeMessage", b =>
                {
                    b.Navigation("CakeMessageDetails");

                    b.Navigation("CakeMessageTypes");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakePart", b =>
                {
                    b.Navigation("CakePartDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CakeReview", b =>
                {
                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("CusCake.Domain.Entities.CustomCake", b =>
                {
                    b.Navigation("CakeDecorationDetails");

                    b.Navigation("CakeExtraDetails");

                    b.Navigation("CakeMessageDetails");

                    b.Navigation("CakePartDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CakeReviews");

                    b.Navigation("CustomCakes");

                    b.Navigation("CustomerVouchers");

                    b.Navigation("Notifications");

                    b.Navigation("OrderSupports");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Order", b =>
                {
                    b.Navigation("CustomerVoucher");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderSupports");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("BankEvents");
                });

            modelBuilder.Entity("CusCake.Domain.Entities.Voucher", b =>
                {
                    b.Navigation("CustomerVouchers");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
